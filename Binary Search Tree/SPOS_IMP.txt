COMPILER
program that converts highlevel language to assembly language

ASSEMBLER
computer program which is used to translate Assembly Language program into machine language.

LINKER
program that takes one or more objects generated by a compiler and combines them into a single executable program

LOADER
Loader is a part of operating system and is responsible for loading executable files into memory and execute them.

COMPILER									INTERPRETER
1.translates just one statement of a program at a time into m/c code.  1.scans the entire program and translates whole 									 program into m/c code at once.
2.overall time to execute the process is much slower.		       2. overall time to execute the process is much faster.
3. Less Memory required as intermediary object code not generated      3. More memory is needed as intermediary code is gener
4. Debugging is easy as it scan only one instruction at a time.	       4. Debugging is not easy

Pass 1 Assembler: Generates intermediate code.
Pass 2 Assembler: Generate the machine code
INPUT OF PASS 2 ASSEMBLER : symbolic machine-opcodes

ASSEMBLY STATEMENTS : [label]   mnemonic   [operands]   [;comment]
INC COUNT        ; Increment the memory variable COUNT
MOV TOTAL, 48    ; Transfer the value 48 in the 
                 ; memory variable TOTAL					  
ADD AH, BH       ; Add the content of the 
                 ; BH register into the AH register					  
AND MASK1, 128   ; Perform AND operation on the 
                 ; variable MASK1 and 128					  
ADD MARKS, 10    ; Add 10 to the variable MARKS
MOV AL, 10       ; Transfer the value 10 to the AL register

	VARIANT 1    				VARIANT 2
1	Extra work required in pass 1	Pass 1 performs simple task
2	IR is very much compact       	IR is not compact.
3	Pass 2 per forms simple task.	Pass 2 requires extra work.
4	Wastage of memory takes place 	Memory saving accurs.

MACRO PROCESSOR : enables you to define and to use macros in your assembly programs
Macro Processor replaces each macro instruction with the corresponding group of source language statements.

MACRO DEFINITION : A macro is a sequence of instructions, assigned by a name and could be used anywhere in the program.

MACRO SYNTAX :
%macro macro_name  number_of_params
<macro body>
%endmacro

If how much storage space is allocated in case of A ds 2 and A dc 2 statements
A DS 2- It allocates 1 word memory to variable A.
A DC 2 - – After Assigning 1 word memory A is initialized to constant value '2'

Types of parameter passed to macro : positional and keyword

POSITIONAL PARAMETERS are symbolic parameters that must be specified in a specific order every time the macro is called.
KEYWORD PARAMETERS are symbolic parameters that can be specified in any order when the macro is called

DIFFERENT STAGES OF COMPILER 
Lexical Analysis O/P meaningful lexemes REPRESENTED IN FORM OF tokens
Syntax Analysis - Syntax error can be detected at this level if the input is not in accordance with the grammar
Semantic Analysis - produces an annotated syntax tree as an output
Intermediate Code Generation - generates an intermediate code of the source code
Code Optimization - does code optimization of the intermediate code
Code Generation - maps optimized representation of the intermediate code to the target machine language

DIFFERENT TYPES OF LOADERS:
Absolute loader     Bootstrap loader	Relocating loader direct linking loader

COMPILE AND GO LOADER 
In this type of loader, the instruction is read line by line, its machine code is obtained and it is directly put in the main memory at some known address.

RELOCATING LOADER
The relocating loader will load the program anywhere in memory, altering the various addresses as required to ensure correct referencing.

DIRECT LINKING LOADER 
A Direct linking loader is a general relocating loader it allows the programmer to use multiple procedure and multiple data segments.

ABSOLUTE LOADER
Absolute loader is a kind of loader in which relocated object files are created, loader accepts these files and places them at specified locations in the memory.

USE OF LINKER
helps to link a object modules of program into a single object file. It performs the process of linking.

STATIC LINKING									DYNAMIC LINKING
1.process of copying all library modules used in the 	1.names of the external libraries or shared libraries are placed into program into the final executable image. 		the memory AND THEN BIND DYNAMICALLY
2.takes constant load time every time it is loaded into 2. load time might be reduced if the shared library code is already   
the memory for execution.  				    present in memory.
3. FASTER						3. SLOWER
4. Statistically linked files are larger in size.	4. Dynamically linked files are smaller in size.  

DLL - DYNAMIC LINK LIBRARY
A DLL is a library that contains code and data that can be used by more than one program at the same time

FUNCTIONS OF OPERATING SYSTEM
(1) manage the computer's resources, such as the central processing unit, memory, disk drives, and printers, 
(2) establish a user interface, and 
(3) execute and provide services for applications software
 
	PROGRAM									PROCESS
1.Program contains a set of instructions designed to complete  1. Process is an instance of an executing program.
a specific task.
2.Program is a static entity.					2. Process is a dynamic entity.
3. Program does not have any control block.		   3. Process has its own control block called Process Control Block.

THREAD - A thread is a program in execution created to perform a specific task.
New (Newborn State)	Runnable State	Running State	Blocked State	Dead State

	PROCESS								THREAD
1.	Process means any program is in execution.	1.Thread means segment of a process.
2.	Process takes more time to terminate.		2.Thread takes less time to terminate.
3.	It takes more time for creation.		3.It takes less time for creation.
4.	It also takes more time for context switching.	4.It takes less time for context switching.
5. 	Process is isolated.				5.Threads share memory.

1) How to achieve mutual exclusion(4 condition)
•No Deadlock
•No Starvation
•Fairness
•Fault Tolerance

2) what is race condition.
A race condition is an undesirable situation that occurs when a device or system attempts to perform two or more operations at the same time, but because of the nature of the device or system, the operations must be done in the proper sequence to be done correctly.

3)What is critical section problem
● It is part of the program where shared resources 
(variables/resources)are accessed by various processes.
● Program is divided into critical (common code)and non-critical 
section(uncommon code).
● When one process access critical section,no other program will 
access critical section otherwise race condition will occur.

4)How to solve producer consumer problem / dinning philosopher problem/ reader 
writer problem?

5)What is semaphore
Semaphores are integer variables that are used to solve the critical section problem by using two atomic operations, wait and signal that are used for process synchronization.
-Types of Semaphores:
•Counting Semaphores
•Binary Semaphores

6) what is mutex.
A mutex is a binary variable whose purpose is to provide locking mechanism. It is used to provide mutual exclusion to a section of code, means only one process can work on a particular code section at a time. 

7)Difference between semaphore and mutex.
SEMAPHORE-
	1)Semaphore is a signalling mechanism.
	2)Semaphore is an integer variable.
	3)Semaphore allow multiple program threads to access a finite instance of resources.
	4)Semaphore value is modified using wait() and signal() operation.

MUTEX-
	1)Mutex is a locking mechanism.
	2)Mutex is an object.
	3)Mutex allow multiple program thread to access a single resource but not simultaneously.
	4)Mutex object is locked or unlocked by the process requesting or releasing the resource.

7) What is segmentation and paging.
• Paging and Segmentation are the non-contiguous memory 
allocation techniques.
• Paging divides the process into equal size partitions called as 
pages.
• Segmentation divides the process into unequal size partitions 
called as segments.

8) What is mean by logical address, virtual address, physical address.

•Logical Address is generated by CPU while a program is running. The logical address is virtual address as it does not exist physically, therefore, it is also known as Virtual Address. 	User can view the logical address of a program.
•Physical Address identifies a physical location of required data in a memory. The user never directly deals with the physical address but can access by its corresponding logical address.

9) What is syntax for logical address and physical address in paging.




10) What is syntax for logical address and physical address in segmentation


11) what is paging and use of paging.
Paging is a memory management technique in which the memory is divided into fixed size pages. Paging is used for faster access to data.

12) What is mean by internal fragmentation and external fragmentation.
Internal Fragmentation-
•When there is a difference between required memory space vs allotted memory space, problem is termed as Internal Fragmentation.
•Internal Fragmentation occurs when Paging is employed.

External fragmentation-
•When there are small and non-contiguous memory blocks which cannot be assigned to any process, the problem is termed as External Fragmentation.
•External Fragmentation occurs when Segmentation is employed.

13) What is mean by contiguous and non contiguous memory allocation.
1. Contiguous Memory Allocation :
Contiguous memory allocation is basically a method in which a single contiguous section/part of memory is allocated to a process or file needing it. Because of this all the available memory space resides at the same place together, which means that the freely/unused available memory partitions are not distributed in a random fashion here and there across the whole memory space.

2. Non-Contiguous Memory Allocation :
Non-Contiguous memory allocation is basically a method on the contrary to contiguous allocation method, allocates the memory space present in different locations to the process as per it’s requirements. As all the available memory space is in a distributed pattern so the freely available memory space is also scattered here and there.

14) Different ways for non contiguous memory allocation.
Paging and Segmentation are the two ways which allow a process’s physical address space to be non-contiguous
15) What is TLB and its use.
• Translation Lookaside Buffer (TLB) is a solution that tries to 
reduce the effective access time.

16) What is demand paging?
Ans: In computer operating systems, demand paging is a method of virtual memory management.

17) What is page replacement and it algorithms.
Ans: operating system that uses paging for virtual memory management, page replacement algorithms decide which memory pages to page out, sometimes called swap out, or write to disk.


18) Which are different page replacement algorithms? Explain it
Ans:1.first in first out
        2.optimal page replacement
        3.least recently used

19) Which are different operating systems?
Ans:1.MS-Dos
        2.Windows operating system
        3.Linux operating system
        4.Solaris operating system
        5.Symbian operating system

20) What are real-time operating systems? (difference between soft and hard os)
Ans:
Soft Real-Time System-
1)A soft real-time system is a system in which one or more failures to meet the deadline are not considered complete system failure, but that performance is considered to be degraded.
2)In a soft real-time system, the size of the data file is large.
3)A soft real-time system has enlarged databases.

Hard-real time system-
1)A hard-real time system is a system in which a failure to meet even a single deadline may lead to complete or appalling system failure.
2)In a hard real-time system, the size of a data file is small or medium.
3)A hard real-time system has short databases.

21) How to convert logical address into physical address.
Ans: Divide logical memory into blocks of same size called pages. Keep track of all free frames. To run a program of size n pages, need to find n free frames and load program. Set up a page table to translate logical to physical addresses.

22) What is deadlock?
Ans: In concurrent computing, a deadlock is a state in which each member of a group waits for another member, including itself to take action.

23) what are necessary conditions for deadlock to occur?
Ans: Conditions for Deadlock- Mutual Exclusion, Hold and Wait, No preemption, Circular wait.

					
24) how to prevent deadlock?
Ans: Conditions for Deadlock- 
Mutual Exclusion
Hold and Wait
No preemption
Circular wait.
We can prevent Deadlock by eliminating any of the above four conditions.

25) Difference between deadlock and starvation
Ans:
Deadlock-
1)All processes keep waiting for each other to complete and none get executed
2)Resources are blocked by the processes
3)Necessary conditions Mutual Exclusion, Hold and Wait, No preemption, Circular Wait
4)Also known as Circular wait
5)It can be prevented by avoiding the necessary conditions for deadlock

Starvation-
1)High priority processes keep executing and low priority processes are blocked
2)Resources are continuously utilized by high priority processes
3)Priorities are assigned to the processes
4)Also know as lived lock
5)It can be prevented by Aging

	








